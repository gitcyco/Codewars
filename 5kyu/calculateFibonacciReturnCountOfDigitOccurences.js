// 5 kyu Calculate Fibonacci return count of digit occurrences
//
// Fibonacci numbers are generated by setting F0 = 0, F1 = 1, and then using the formula:
// Fn = Fn-1 + Fn-2
//
// Your task is to efficiently calculate the nth element in the Fibonacci sequence and then
// count the occurrence of each digit in the number. Return a list of integer pairs sorted in descending order.
//
// 10 ≤ n ≤ 100000
// Examples
//
// f(10) = 55  # returns [(2, 5)], as there are two occurances of digit 5
//
// f(10000)    # returns:
//   [(254, 3),
//    (228, 2),
//    (217, 6),
//    (217, 0),
//    (202, 5),
//    (199, 1),
//    (198, 7),
//    (197, 8),
//    (194, 4),
//    (184, 9)]
//
// If two integers have the same count, sort them in descending order.
//
// Your algorithm must be efficient.
//
// Answer:
function fibDigits(n) {
  let cache = {};
  if (n > 1000) {
    for (let idx = 0; idx < n - 1000; idx += 1000) {
      fibonacci(idx, cache);
    }
  }
  let val = fibonacci(n, cache).toString();
  let obj = {};

  for (let s of val) {
    if (s in obj) obj[s]++;
    else obj[s] = 1;
  }
  let arr = Object.entries(obj);
  arr = arr
    .map((e) => ([e[0], e[1]] = [+e[1], +e[0]]))
    .sort((a, b) => {
      if (b[0] == a[0]) return b[1] - a[1];
      return b[0] - a[0];
    });
  return arr;
}

const fibonacci = function (n, cache = {}) {
  if (cache[n]) return cache[n];
  if (n < 2) return n;
  return (cache[n] = BigInt(fibonacci(n - 1, cache)) + BigInt(fibonacci(n - 2, cache)));
};
